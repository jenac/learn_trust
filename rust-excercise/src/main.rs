mod about_method;
mod collections;
mod complex_types;
mod deepdive_types;
mod flow_control;
mod formats;
mod functional_programming;
mod generics_and_traits;
mod lifetime;
mod match_pattern;
mod ownership_and_borrowing;
mod reference_and_borrow;
mod return_result;
mod smart_pointers;
mod type_convert;
mod circular_or_self_ref;
fn main() {
    // ownership_and_borrowing::demo_it();
    // reference_and_borrow::demo_it();
    // complex_types::about_string::demo_it();
    // complex_types::more_string::demo_it();
    // complex_types::too_more_string::demo_it();
    // complex_types::tuples::demo_it();
    // complex_types::struct_demo::demo_it();
    // complex_types::enum_demo::demo_it();
    // complex_types::array_demo::demo_it();
    // flow_control::basics::demo_it();
    // match_pattern::match_basics::demo_it();
    // match_pattern::if_let::demo_it();
    // match_pattern::about_option::demo_it();
    // match_pattern::match_summary::demo_it();
    // about_method::methods::demo_it();
    // generics_and_traits::about_generics::demo_it();
    // generics_and_traits::about_trait::demo_it();
    // generics_and_traits::trait_examples::demo_it();
    // generics_and_traits::trait_object::demo_it();
    // generics_and_traits::more_traits::demo_it();
    // collections::about_vector::demo_it();
    // collections::about_hashmap::demo_it();
    // type_convert::about_type_convert::demo_it();
    // crate::return_result::about_result::demo_it();
    // formats::about_formats::demo_it();
    // lifetime::lifetime_intro::demo_it();
    // lifetime::reborrow::demo_it();
    // lifetime::about_static::demo_it();
    // functional_programming::about_closure::demo_it();
    // functional_programming::about_iterator::demo_it();
    // deepdive_types::about_types::demo_it();
    // deepdive_types::sized_and_dst::demo_it();
    // deepdive_types::enum_and_int::demo_it();
    // smart_pointers::about_box::demo_it();
    // smart_pointers::about_deref::demo_it();
    // smart_pointers::about_drop::demo_it();
    // smart_pointers::rc_and_arc::demo_it();
    // smart_pointers::cell_and_refcell::demo_it();
    circular_or_self_ref::weak_ref::demo_it();
}
